# Passing values between jobs
# If we generate a value in one step of a job, we can use the value in the subsequent steps of the same job by assigning the value to an environment variable. As we know, this is how we can create an environment variable and once the variable is created, this value can be directly referenced and used like this in the subsequent steps of the same job. Another way of making the values accessible in the next steps is using this set output command of GitHub Action workflows


name: Passing values to next job

# Controls when the workflow will run
on: workflow_dispatch

jobs:
  # This workflow contains a single job called "build"
  github-pass-value-job-1:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # map a step output to a job output
    outputs:
      output1: ${{steps.step1.outputs.test}}
      output2: ${{steps.step2.outputs.test}}
      output3: ${{steps.step3.variableName_1}}
      output4: ${{steps.step4.variableName_2}}

    steps:
      - id: step1
        run: |
          echo "::set-output name=test::ImportValue1"
      - id: step2
        run: |
          echo "::set-output name=test::ImportValue2"

    
      - id: step3
        run: |
          echo "variableName_1=This-is-variable-value-1" >> $GITHUB_ENV
      - id: step4
        run: |
          echo "variableName_2=This-is-variable-value-2" >> $GITHUB_ENV

  
  github-pass-value-job-2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest   
    needs: github-pass-value-job-1

    steps:
      - run: |
          echo "Printing the Values"
          echo output1: ${{needs.github-pass-value-job-1.outputs.output1}}
          echo output2: ${{needs.github-pass-value-job-1.outputs.output2}}
          echo variableName_1: ${{env.variableName_1}}
          echo variableName_2: ${{env.variableName_2}}
          echo output3: ${{needs.github-pass-value-job-1.outputs.output3}}
          echo output4: ${{needs.github-pass-value-job-1.outputs.output4}}
     
      
